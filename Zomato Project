STEP 1: Creating tables- goldusers_signup, users, sales, product

CREATE TABLE goldusers_signup(userid integer,gold_signup_date date); 
INSERT INTO goldusers_signup (userid, gold_signup_date) 
VALUES (1, '2017-09-22'),
       (3, '2017-04-21');

CREATE TABLE users(userid integer,signup_date date); 
INSERT INTO users (userid, signup_date) 
VALUES 
    (1, '2014-09-02'),
    (2, '2015-01-15'),
    (3, '2014-04-11');
    
CREATE TABLE sales(userid integer,created_date date,product_id integer); 
INSERT INTO sales (userid, created_date, product_id)
VALUES
    (1, '2017-04-19', 2),
    (3, '2019-12-18', 1),
    (2, '2020-07-20', 3),
    (1, '2019-10-23', 2),
    (1, '2018-03-19', 3),
    (3, '2016-12-20', 2),
    (1, '2016-11-09', 1),
    (1, '2016-05-20', 3),
    (2, '2017-09-24', 1),
    (1, '2017-03-11', 2),
    (1, '2016-03-11', 1),
    (3, '2016-11-10', 1),
    (3, '2017-12-07', 2),
    (3, '2016-12-15', 2),
    (2, '2017-11-08', 2),
    (2, '2018-09-10', 3);
    
CREATE TABLE product(product_id integer,product_name text,price integer); 
INSERT INTO product(product_id,product_name,price) 
 VALUES
(1,'p1',980),
(2,'p2',870),
(3,'p3',330);


STEP 2: Open tables to see data 

select * from sales;
select * from product;
select * from goldusers_signup;
select * from users;


STEP 3: Answer questions by running code

1. what is the total amount customer spend on zomato?
CODE:
select a.userid, sum(b.price) as total_amount_spend from sales a inner join product b on a.product_id = b.product_id group by a.userid;

2. how many days has each customer visited zomato? 
CODE:
select userid, count(distinct created_date) as distinct_days from sales group by userid;

3. what was the first product purchased by each of the customers?
CODE:
select * from (select *, rank() over(partition by userid order by created_date) as rnk from sales) a where rnk=1;

4. what is the most purchased item on menu and how many times it was purchased by all customers? 
CODE:
select userid, count(product_id) as cnt from sales where product_id = (select product_id from sales group by product_id order by count(product_id) desc limit 1) group by userid;

5. which item was most popular for each customer?
CODE:
select * from (select *, rank() over(partition by userid order by cnt desc) as rnk from 
( select userid, product_id, count(product_id) as cnt from sales group by userid, product_id) a) b where rnk=1; 

6. Which item was purchased first by the customer after they became member
CODE:
select * from 
(select c.*,rank() over(partition by userid order by created_date) as rnk from 
(select a.userid, a.created_date, a.product_id, b.gold_signup_date from sales a inner join 
goldusers_signup b on a.userid=b.userid and created_date>= gold_signup_date) c)d where rnk=1;

7. which item was purchased just before the customer became a member?
CODE:
select * from
(select c.*,rank() over(partition by userid order by created_date desc) as rnk from 
(select a.userid, a.created_date, a.product_id, b.gold_signup_date from sales a inner join 
goldusers_signup b on a.userid=b.userid and created_date<= gold_signup_date) c)d where rnk=1;

8. what is the total orders and amount spent for each member before they became a member?
CODE:
select userid, count(created_date) order_purchased, sum(price) total_amt_spend from
(select c.*, d.price from(select a.userid, a.created_date, a.product_id, b.gold_signup_date from sales a inner join 
goldusers_signup b on a.userid=b.userid and created_date<= gold_signup_date)c inner join product d on c.product_id=d.product_id)e group by userid;

9. if buying each product generates points for eg 5rs=2 Zomato and each product has different purchasing points for eg for p1 5rs=1 Zomato point, for p2 10rs=5 Zomato points and p3 5rs=1 zomato points 
2rs=1 zomato points, calculate points collected by each customer and for which product most points have been given till now 
CODE:
select userid, sum(total_points)*2.5 as total_money_earned from
(select e.*, amt/points as total_points from(select d.*, case when product_id=1 then 5 when product_id=2 then 2 when product_id=3 then 5 else 0 end as points from
(select c.userid, c.product_id, sum(price) as amt from(select a.*, b.price from sales a inner join product b on a.product_id=b.product_id)c group by userid, product_id)d)e)f 
group by userid;
select product_id, sum(total_points) as total_points_earned from
(select e.*, amt/points as total_points from(select d.*, case when product_id=1 then 5 when product_id=2 then 2 when product_id=3 then 5 else 0 end as points from 
(select c.userid, c.product_id, sum(price) as amt from (select a.*, b.price from sales a inner join product b on a.product_id=b.product_id)c group by userid, product_id)d)e)f 
group by product_id;

10. in the first one year after a customer join the gold program (including their join date) irrespective of what the customer has purchased they earn 5 Zomato points for every 10rs spent who earned more 1 or 3 
and what was their points earning in their first year? 
1zp = 2rs
0.5zp = 1rs
CODE:
Select c.userid, c.created_date, c.product_id, c.gold_signup_date, SUM(d.price * 0.5) as total_points_earned_in_first_year From 
(select a.userid, a.created_date, a.product_id, b.gold_signup_date from sales a inner join goldusers_signup b on a.userid = b.userid where 
a.created_date >= b.gold_signup_date and a.created_date <= date_add(b.gold_signup_date, INTERVAL 1 YEAR)) c 
inner join product d on c.product_id = d.product_id group by c.userid, c.created_date, c.product_id, c.gold_signup_date having total_points_earned_in_first_year >= 1
order by total_points_earned_in_first_year desc;

11. rank all the transaction of the customers
CODE: 
select *, rank() over(partition by userid order by created_date) as rnk from sales;

12. rank all the transactions for each member whenever they are a zomato gold member for every non gold member transaction mark as na
CODE:
Select e.*,case when gold_signup_date is null then 'na' else cast(rnk as char) end as rnkk from
(select c.*,rank() over(partition by userid, case when gold_signup_date is null then 0 else 1 end order by created_date desc) as rnk from
(select a.userid, a.created_date, a.product_id, b.gold_signup_date from sales a left join goldusers_signup b ON a.userid = b.userid) c) e;
